"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var SdlPrinter = /** @class */ (function () {
    function SdlPrinter() {
    }
    SdlPrinter.prototype.print = function (tables) {
        var _this = this;
        var candidates = tables.filter(function (x) { return !x.isJunctionTable; });
        var sdl = _.map(candidates, function (table) {
            return _this.printType(table, tables.filter(function (x) { return x != table; }));
        });
        return sdl.join('\r\n');
    };
    SdlPrinter.prototype.printType = function (table, otherTables) {
        var _this = this;
        var nativeFields = table.columns;
        var filterFunction = function (c) {
            return (c.relation || false) && c.relation.table == table.name;
        };
        var relationFields = otherTables
            .filter(function (t) { return t.columns.some(filterFunction); })
            .map(function (t) {
            return t.columns
                .filter(filterFunction)
                .map(function (c) { return ({ remoteColumn: c, remoteTable: t }); });
        })
            .reduce(function (acc, next) { return acc.concat(next); }, []);
        return "type " + this.capitalizeFirstLetter(table.name) + " @pgTable(name: \"" + table.name + "\") {" + _.map(nativeFields, function (column) { return _this.printField(column); }).join('') + relationFields
            .map(function (field) { return _this.printBackRelationField(field); })
            .join('') + "\n}\n";
    };
    SdlPrinter.prototype.printBackRelationField = function (field) {
        if (field.remoteTable.isJunctionTable) {
            var otherRemoteTableField = field.remoteTable.columns.filter(function (x) { return x.name !== field.remoteColumn.name; })[0];
            var relatedTable = otherRemoteTableField.relation.table;
            return "\n  " + this.lowerCaseFirstLetter(relatedTable) + "s: [" + this.capitalizeFirstLetter(relatedTable) + "!]! @pgRelationTable(table: \"" + field.remoteTable.name + "\" name: \"" + field.remoteTable.name + "\")";
        }
        else {
            return "\n  " + field.remoteTable.name + "s: [" + this.capitalizeFirstLetter(field.remoteTable.name) + "!]!";
        }
    };
    SdlPrinter.prototype.printField = function (column) {
        return "\n  " + this.printFieldName(column) + ": " + this.printFieldType(column) + this.printFieldOptional(column) + this.printRelationDirective(column) + this.printFieldDirective(column);
    };
    SdlPrinter.prototype.printFieldName = function (column) {
        if (column.relation) {
            return this.removeIdSuffix(column.name);
        }
        else {
            return column.name;
        }
    };
    SdlPrinter.prototype.printFieldType = function (column) {
        if (column.relation) {
            return this.capitalizeFirstLetter(column.relation.table);
        }
        else {
            return column.typeIdentifier;
        }
    };
    SdlPrinter.prototype.printRelationDirective = function (column) {
        if (column.relation) {
            return " @pgRelation(column: \"" + column.name + "\")";
        }
        else {
            return '';
        }
    };
    SdlPrinter.prototype.printFieldOptional = function (column) {
        return column.nullable ? '' : '!';
    };
    SdlPrinter.prototype.printFieldDirective = function (column) {
        if (column.isUnique) {
            return " @unique";
        }
        if (column.defaultValue != null) {
            if (column.defaultValue == '[AUTO INCREMENT]') {
                return '';
            }
            if (column.typeIdentifier == 'String' ||
                column.typeIdentifier == 'DateTime' ||
                column.typeIdentifier == 'Json') {
                return " @default(value: \"" + column.defaultValue + "\")";
            }
            else {
                return " @default(value: " + column.defaultValue + ")";
            }
        }
        return '';
    };
    SdlPrinter.prototype.capitalizeFirstLetter = function (string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    };
    SdlPrinter.prototype.lowerCaseFirstLetter = function (string) {
        return string.charAt(0).toLowerCase() + string.slice(1);
    };
    SdlPrinter.prototype.removeIdSuffix = function (string) {
        function removeSuffix(suffix, string) {
            if (string.endsWith(suffix)) {
                return string.substring(0, string.length - suffix.length);
            }
            else {
                return string;
            }
        }
        return removeSuffix('_ID', removeSuffix('_id', removeSuffix('Id', string)));
    };
    return SdlPrinter;
}());
exports.SdlPrinter = SdlPrinter;
//# sourceMappingURL=SdlPrinter.js.map